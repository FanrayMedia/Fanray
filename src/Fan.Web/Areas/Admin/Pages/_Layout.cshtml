@{ 
    var coreSettings = await settingService.GetSettingsAsync<CoreSettings>();
    var currentUser = await userManager.GetUserAsync(Context.User);
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Fanray Admin Console</title>
    <link rel="shortcut icon" href="/favicon.ico">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons" rel="stylesheet">
    <link href="https://unpkg.com/vuetify@1.1.9/dist/vuetify.min.css" rel="stylesheet">
    <style>
        [v-cloak] {
            display: none
        }

        .active-tab {
            background-color: #d2eafe;
            height: 100%;
        }
    </style>
    @RenderSection("Styles", required: false)
</head>
<body>
    @Html.AntiForgeryToken()

    <div id="app" v-cloak>
        <v-app light>
            @* Drawer *@
            <v-navigation-drawer :clipped="$vuetify.breakpoint.lgAndUp"
                                 v-model="drawer"
                                 fixed
                                 app>
                <v-list dense>
                    <template v-for="item in items">
                        <v-list-tile :href="item.url" :value="item.active" active-class="active-tab">
                            <v-list-tile-action>
                                <v-icon>{{ item.icon }}</v-icon>
                            </v-list-tile-action>
                            <v-list-tile-content>
                                <v-list-tile-title>
                                    {{ item.text }}
                                </v-list-tile-title>
                            </v-list-tile-content>
                        </v-list-tile>
                    </template>
                </v-list>
            </v-navigation-drawer>
            @* Topbar *@
            <v-toolbar :clipped-left="$vuetify.breakpoint.lgAndUp"
                       color="blue darken-3"
                       dark
                       app
                       dense
                       fixed>
                <v-toolbar-side-icon @@click.stop="drawer = !drawer"></v-toolbar-side-icon>
                <v-toolbar-title class="hidden-sm-and-down">@coreSettings.Title</v-toolbar-title>
                <v-spacer></v-spacer>
                <v-menu offset-y origin="center center" :nudge-bottom="6" transition="scale-transition">
                    <v-btn icon large flat slot="activator">
                        <v-avatar size="32px">
                            <img gravatar-email="@currentUser.Email" title="@currentUser.DisplayName" />
                        </v-avatar>
                    </v-btn>
                    <v-list>
                        <v-list-tile @@click="">
                            <v-list-tile-action>
                                <v-icon>account_circle</v-icon>
                            </v-list-tile-action>
                            <v-list-tile-content>
                                <v-list-tile-title>Profile</v-list-tile-title>
                            </v-list-tile-content>
                        </v-list-tile>
                        <v-list-tile @@click="logout">
                            <v-list-tile-action>
                                <v-icon>power_settings_new</v-icon>
                            </v-list-tile-action>
                            <v-list-tile-content>
                                <v-list-tile-title>Logout</v-list-tile-title>
                            </v-list-tile-content>
                        </v-list-tile>
                    </v-list>
                </v-menu>
                <v-btn icon href="/" title="Go to my blog">
                    <v-icon>exit_to_app</v-icon>
                </v-btn>
            </v-toolbar>
            @* Content *@
            <v-content>
                @RenderBody()
            </v-content>
            <v-snackbar :timeout="3000"
                        bottom
                        right
                        :color="snackbar.color"
                        v-model="snackbar.show">
                {{ snackbar.text }}
                <v-btn dark flat @@click.native="snackbar.show = false" icon>
                    <v-icon>close</v-icon>
                </v-btn>
            </v-snackbar>
        </v-app>
    </div>
    <environment include="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.js"></script>
        <script src="https://unpkg.com/vuetify@1.1.9/dist/vuetify.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.min.js"></script>
        <script src="https://unpkg.com/vuetify@1.1.9/dist/vuetify.min.js"></script>
    </environment>
    <script src="https://unpkg.com/axios@0.18.0/dist/axios.min.js"></script>
    @RenderSection("ComponentScripts", required: false)
    <script>
        var app = new Vue({
            el: '#app',
            data: () => ({
                drawer: null,
                active: true,
                items: [
                    { icon: 'list', text: 'Posts', url: '/admin/posts', active: false },
                    { icon: 'insert_photo', text: 'Media', url: '/admin/media', active: false },
                    { icon: 'folder', text: 'Categories', url: '/admin/categories', active: false },
                    { icon: 'label', text: 'Tags', url: '/admin/tags', active: false },
                    //{ icon: 'widgets', text: 'Widgets', url: '/admin/widgets', active: false },
                    { icon: 'supervisor_account', text: 'Users', url: '/admin/users', active: false },
                    { icon: 'settings', text: 'Settings', url: '/admin/settings', active: false },
                ],                  
                snackbar: {
                    show: false,
                    text: '',
                    color: '',
                },
            }),
            computed: {
                tok: function () {
                    return document.querySelector('input[name="__RequestVerificationToken"][type="hidden"]').value;
                },
            },
            mounted() {
                var url = window.location.pathname;
                this.items.forEach(function (item) {
                    item.active = item.url === url;
                });
            },
            methods: {
                logout: function () {
                    console.log('logout');
                    axios.post('/account/logout', null, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(function (response) {
                            window.location = '/';
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
            }
        });
    </script>
</body>
</html>
