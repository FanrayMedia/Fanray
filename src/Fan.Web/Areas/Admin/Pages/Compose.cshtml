@page "{postId:int?}"
@model Fan.Web.Pages.Admin.ComposeModel
@{
    ViewData["Title"] = "Compose";
    Layout = null;
    var coreSettings = await settingService.GetSettingsAsync<CoreSettings>();
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    <title>@ViewData["Title"] - Fanray</title>
    <link rel="shortcut icon" href="/favicon.ico">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons" rel="stylesheet">
    <link href="https://unpkg.com/vuetify@1.1.8/dist/vuetify.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/admin/css/compose.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/themes/@coreSettings.Theme/css/content.css" asp-append-version="true" />
</head>
<body>
    @Html.AntiForgeryToken()

    <div id="app" v-cloak>
        <v-app id="inspire" style="background-color:white">
            @* Drawer *@
            <v-navigation-drawer fixed
                                 :clipped="$vuetify.breakpoint.mdAndUp"
                                 app
                                 v-model="drawer">
                <v-expansion-panel v-model="panel" expand>
                    <v-expansion-panel-content>
                        <div slot="header">Status</div>
                        <v-card>
                            <div v-if="published">
                                <v-container fill-height fluid pa-0>
                                    <v-layout fill-height>
                                        <v-flex xs12 align-end flexbox>
                                            <div style="text-align:center;font-size:inherit">
                                                <span style="color:#29B6F6;padding-right: 5px;font-weight:bold">Published</span><span>on {{ date }}</span>
                                            </div>
                                        </v-flex>
                                    </v-layout>
                                </v-container>
                                <v-card-actions>
                                    <v-btn small
                                           style="width:100%;color:#29B6F6"
                                           color="gray"
                                           @@click="revert">
                                        <v-icon left dark>undo</v-icon>
                                        Revert to draft
                                    </v-btn>
                                </v-card-actions>
                            </div>
                            <div v-if="isDraft">
                                <v-container fill-height fluid pa-0>
                                    <v-layout fill-height>
                                        <v-flex xs12 align-end flexbox>
                                            <div style="text-align:center;font-size:inherit">
                                                <span style="color:teal;padding-right: 5px;font-weight:bold">Draft</span><span>saved on {{ draftDate }}</span>
                                            </div>
                                        </v-flex>
                                    </v-layout>
                                </v-container>
                            </div>
                            <v-card-text>
                                <v-menu ref="menuDate"
                                        :close-on-content-click="false"
                                        v-model="menuDate"
                                        :return-value.sync="date"
                                        lazy
                                        transition="scale-transition"
                                        offset-y
                                        full-width
                                        @@input="onFieldsChange">
                                    <v-text-field label="Post Date"
                                                  slot="activator"
                                                  v-model="date"
                                                  readonly></v-text-field>
                                    <v-date-picker v-model="date"
                                                   no-title
                                                   scrollable
                                                   @@input="$refs.menuDate.save(date)"></v-date-picker>
                                </v-menu>
                            </v-card-text>
                        </v-card>
                    </v-expansion-panel-content>
                    <v-expansion-panel-content>
                        <div slot="header">Category & Tags</div>
                        <v-card>
                            <v-card-text>
                                <v-select label="Category"
                                          v-model="selectedCatId"
                                          :items="cats"
                                          item-value="value"
                                          dense
                                          @@input="onFieldsChange"></v-select>
                                <v-combobox label="Tags"
                                            hint="When you type in a new tag use tab to delimit."
                                            v-model="selectedTags"
                                            :items="tags"
                                            dense
                                            multiple
                                            small-chips
                                            deletable-chips
                                            @@input="onFieldsChange"></v-combobox>
                            </v-card-text>
                        </v-card>
                    </v-expansion-panel-content>
                    <v-expansion-panel-content>
                        <div slot="header">Slug & Excerpt</div>
                        <v-card>
                            <v-card-text>
                                <v-text-field label="Slug"
                                              v-model="slug"
                                              @@input="onFieldsChange"></v-text-field>
                                <v-textarea label="Excerpt"
                                            v-model="excerpt"
                                            auto-grow
                                            @@input="onFieldsChange"></v-textarea>
                            </v-card-text>
                        </v-card>
                    </v-expansion-panel-content>
                </v-expansion-panel>

                <v-card flat
                        style="margin-bottom:8px">
                    <v-card-actions>
                        <v-btn small
                               style="width:100%"
                               color="grey darken-2"
                               class="white--text">
                            <v-icon left dark>delete_forever</v-icon>
                            Delete post
                        </v-btn>
                    </v-card-actions>
                </v-card>
            </v-navigation-drawer>
            @* Topbar *@
            <v-toolbar color="blue darken-3"
                       dark
                       app
                       :clipped-left="$vuetify.breakpoint.mdAndUp"
                       fixed>
                <v-toolbar-side-icon @@click.stop="drawer = !drawer"></v-toolbar-side-icon>
                <v-btn @@click="pub" :disabled="disablePubButton" color="orange">{{ pubText }}</v-btn>
                @*<v-btn>Preview</v-btn>*@
                <v-btn @@click="saveDraft" flat small v-if="saveVisible" :disabled="saveDisabled" color="orange">{{ saveText }}</v-btn>
                <v-spacer></v-spacer>
                <v-btn href="/admin">Close</v-btn>
            </v-toolbar>
            @* Editor *@
            <v-content>
                <div id="content-area">
                    <v-textarea tabindex="1"
                                id="post-title"
                                label=""
                                auto-grow
                                placeholder="Title"
                                aria-label="Edit title"
                                rows="1"
                                @@input="onFieldsChange"
                                @@keyup.enter="titleEnter"
                                v-model="title"></v-textarea>

                    <textarea name="content" id="editor">{{ content }}</textarea>
                </div>
            </v-content>
            @* Image Dialog *@
            <v-dialog v-model="showMediaDialog" lazy max-width="80%">
                <v-card>
                    <v-card-text>
                        <div>
                            <v-toolbar class="elevation-0">
                                <v-btn flat @@click="uploadImages">
                                    <v-icon color="primary">cloud_upload</v-icon>
                                    &nbsp;Upload
                                </v-btn>
                            </v-toolbar>
                            <v-divider></v-divider>
                            <div class="gallery">
                                <a v-for="image in images" :key="image.id" @@click="insertImage(image.url)">
                                    <img :src="image.url" :alt="image.fileName">
                                </a>
                            </div>
                        </div>
                    </v-card-text>
                    <v-card-actions>
                        <v-btn color="primary" flat @@click.stop="showMediaDialog=false">Close</v-btn>
                    </v-card-actions>
                </v-card>
            </v-dialog>
        </v-app>
    </div>
    <environment include="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.js"></script>
        <script src="https://unpkg.com/vuetify@1.1.8/dist/vuetify.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.min.js"></script>
        <script src="https://unpkg.com/vuetify@1.1.8/dist/vuetify.min.js"></script>
    </environment>
    <script src="https://unpkg.com/axios@0.18.0/dist/axios.min.js"></script>
    <script src="~/admin/js/ckeditor.js" asp-append-version="true"></script>
    <script>
        var app = new Vue({
            el: '#app',
            data: () => ({
                id: 0,
                published: false,
                isDraft: false,
                pubClicked: false,
                pubText: '',
                saveVisible: false,
                saveDisabled: false,
                saveText: 'Save',
                closing: true,
                fieldChanged: false,
                drawer: null,
                panel: [true, true, true],
                menuDate: false,
                date: '',
                draftDate: '',
                selectedCatId: 1,
                cats: [],
                selectedTags: [],
                tags: [],
                slug: '',
                excerpt: '',
                title: '',
                mediaDialogVisible: false,
                images: [],
                editor: null,
                content: '',
            }),
            computed: {
                showMediaDialog: {
                    get: function () {
                        if (this.mediaDialogVisible) {
                            this.getImages();
                        }
                        return this.mediaDialogVisible
                    },
                    set: function (value) {
                        if (!value) {
                            this.mediaDialogVisible = false;
                        }
                    }
                },
                disablePubButton() {
                    return this.title.trim().length <= 0 || this.pubClicked;
                },
                tok: function () {
                    return document.querySelector('input[name="__RequestVerificationToken"][type="hidden"]').value;
                },
                payload: function () {
                    return {
                        id: this.id,
                        postDate: this.date,
                        categoryId: this.selectedCatId,
                        tags: this.selectedTags,
                        slug: this.slug,
                        excerpt: this.excerpt,
                        title: this.title,
                        body: this.editor.getData(),
                    }
                },
            },
            mounted() {
                //this.initHighlight();
                this.initEditor();
            },
            methods: {
                initEditor() {
                    this.id = window.location.href.substring(window.location.href.lastIndexOf("/") + 1) | 0;
                    axios.get(`/admin/compose?handler=post&postId=${this.id}`).then(resp => {
                        this.date = resp.data.post.postDate;
                        this.selectedCatId = resp.data.post.categoryId;
                        this.selectedTags = resp.data.post.tags;
                        this.slug = resp.data.post.slug;
                        this.excerpt = resp.data.post.excerpt;
                        this.title = resp.data.post.title;
                        this.content = resp.data.post.body;
                        this.published = resp.data.post.published;
                        this.isDraft = resp.data.post.isDraft;
                        this.draftDate = resp.data.post.draftDate;
                        this.cats = resp.data.allCats;
                        this.tags = resp.data.allTags;
                        this.pubText = this.published ? 'Update' : 'Publish';                      

                        let typingTimer;
                        let doneTypingInterval = 5000;

                        ClassicEditor.create(document.querySelector('#editor'), {
                            autosave: {
                                save(editor) {
                                    clearTimeout(typingTimer);
                                    if (!app.published) {
                                        console.log('here');
                                        app.saveVisible = true;
                                        app.saveDisabled = false;
                                        app.saveText = 'Save';
                                        typingTimer = setTimeout(app.saveDraft, doneTypingInterval);
                                    }
                                }
                            }
                        })
                            .then(editor => {
                                app.editor = editor;
                                console.log('editor initialized: ', app.editor);
                            })
                            .catch(error => {
                                console.error(error);
                            });
                    });                   
                },
                //initHighlight() {
                //    hljs.configure({
                //        languages: ['cs', 'css', 'java', 'javascript', 'markdown', 'ruby', 'python', 'scss', 'sql', 'typescript', 'xml']
                //    });
                //},
                onFieldsChange() {
                    this.fieldChanged = true;
                    if (this.published) return;
                    this.saveVisible = true;
                    this.saveDisabled = false;
                    this.saveText = 'Save';
                },
                saveDraft() {
                    console.log('save draft');
                    this.saveVisible = true;
                    this.saveDisabled = true;
                    this.saveText = 'Saving...';

                    console.log(this.payload);
                    axios.post('/admin/compose?handler=save', this.payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            this.id = resp.data.id;
                            this.slug = resp.data.slug;
                            this.draftDate = resp.data.draftDate;
                            this.isDraft = true;
                            if (window.location.href.endsWith('/compose'))
                                history.replaceState({}, null, window.location.href + `/${this.id}`);
                        })
                        .catch(err => { console.log(err); });

                    this.fieldChanged = false;
                    this.saveText = 'Saved';
                },
                revert() {
                    this.published = false;
                    this.pubText = this.published ? 'Update' : 'Publish';
                    this.saveDraft();
                },
                pub() {
                    this.closing = false;
                    this.pubClicked = true;
                    this.pubText = this.published ? 'Updating...' : 'Publishing...';

                    const url = this.published ? '/admin/compose?handler=update' : '/admin/compose?handler=publish';
                    axios.post(url, this.payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            window.location.replace(resp.data);
                        })
                        .catch(err => { console.log(err); });
                },
                uploadImages() {
                    const input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');
                    input.setAttribute('multiple', null);
                    input.click();
                    input.onchange = () => {
                        const formData = new FormData();
                        for (let i = 0; i < input.files.length; i++) {
                            formData.append('images', input.files[i]);
                        }

                        axios.post('/admin/media?handler=image', formData, { headers: { 'XSRF-TOKEN': this.$root.tok } })
                            .then(resp => {
                                this.images = resp.data.images;
                            })
                            .catch(err => {
                                console.log(err);
                            });
                    };
                },
                getImages() {
                    let url = `/admin/media?handler=images`;
                    axios.get(url).then(resp => {
                        this.images = resp.data.images;
                    }).catch(err => console.log(err));
                },
                insertImage(url) {
                    // https://docs.ckeditor.com/ckeditor5/latest/builds/guides/faq.html#where-are-the-editorinserthtml-and-editorinserttext-methods-how-to-insert-some-content
                    // https://docs.ckeditor.com/ckeditor5/latest/features/image.html#image-captions
                    const imgHtml = `<figure class="image"><img src="${url}" alt=""><figcaption></figcaption></figure>`;
                    const viewFragment = this.editor.data.processor.toView(imgHtml);
                    const modelFragment = this.editor.data.toModel(viewFragment);
                    this.editor.model.insertContent(modelFragment, this.editor.model.document.selection);
                    //this.mediaDialogVisible = false;
                },
                titleEnter() {
                    this.title = this.title.replace(/\n/g, ' ');
                }
            },
        });
    </script>
</body>
</html>