@page
@model WidgetsModel
@{
    ViewData["Title"] = "Widgets";
}

<site-widgets inline-template>
    <v-container fluid>
        <v-layout align-start>
            <v-flex xs6 md4 elevation-1 ma-2>
                <v-list dense>
                    <v-subheader>
                        Available Widgets
                    </v-subheader>
                    <draggable id="widget-infos"
                               v-model="widgetInfos"
                               :options="{group: {name:'widgets', pull:'clone', put: false}, sort: false}"
                               style="cursor:pointer">
                        <template v-for="info in widgetInfos">
                            <v-list-tile :key="info.id" avatar style="border:1px solid #eee;margin:5px">
                                <v-list-tile-content>
                                    <div>
                                        <span style="font-weight:bold;color:#333">{{info.name}}</span>
                                        <span style="color:#999">- {{info.description}}</span>
                                    </div>
                                </v-list-tile-content>
                            </v-list-tile>
                        </template>
                    </draggable>
                </v-list>
            </v-flex>
            <v-flex xs6 md4>
                <v-list dense class="elevation-1 ma-2" v-for="area in widgetAreas" :key="area.id">
                    <v-subheader>
                        {{ area.title }}
                    </v-subheader>
                    <draggable :id="area.id"
                               v-model="area.widgets"
                               :options="{group:'widgets', ghostClass:'sortable-ghost'}"
                               @@add="add"
                               @@sort="sort"
                               style="min-height: 10px;cursor:move">
                        <template v-for="widget in area.widgetInstances">
                            <v-list-tile :key="widget.id" avatar style="border:1px solid #eee;margin:5px">
                                <v-list-tile-content>
                                    <div>
                                        <span style="font-weight:bold;color:#333">{{widget.name}}</span>
                                        <span style="color:#999">: {{widget.title}}</span>
                                    </div>
                                </v-list-tile-content>
                                <v-list-tile-action>
                                    <v-list-tile-action-text>
                                        <v-btn flat icon class="mr-1" @@click="editWidget(widget)">
                                            <v-icon>edit</v-icon>
                                        </v-btn>
                                        <v-btn flat icon @@click="deleteWidget(widget, area.id)">
                                            <v-icon>delete</v-icon>
                                        </v-btn>
                                    </v-list-tile-action-text>
                                </v-list-tile-action>
                            </v-list-tile>
                        </template>
                    </draggable>
                </v-list>
            </v-flex>
        </v-layout>
        <v-dialog lazy
                  v-model="dialogVisible"
                  @@keydown.esc="closeDialog"
                  content-class="widget-edit-dialog">
            <v-card>
                <v-card-title class="pl-4 pt-2 pb-0">
                    <span style="font-size:larger;font-weight:bold">{{ dialogTitle }}</span>
                    <v-spacer></v-spacer>
                    <v-btn flat small fab @@click="closeDialog">
                        <v-icon>close</v-icon>
                    </v-btn>
                </v-card-title>
                <v-divider></v-divider>
                <v-card-text>
                    <iframe ref="editIframe"
                            @@load="resizeIframe"
                            frameborder="0" 
                            scrolling="no"
                            class="widget-edit-frame"
                            v-if="widgetEditUrl"
                            :src="widgetEditUrl"
                            :title="dialogTitle"></iframe>
                </v-card-text>
            </v-card>
        </v-dialog>
    </v-container>    
</site-widgets>

@section ComponentScripts {
    <script src="//cdn.jsdelivr.net/npm/sortablejs@1.8.3/Sortable.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.17.0/vuedraggable.min.js"></script>
    <script>      
        let widgetsMixin = {
            data: function () {
                return {
                    widgetInfos: @Html.Raw(Model.WidgetManifestsJson),
                    widgetAreas: @Html.Raw(Model.WidgetAreasJson),
                }
            },
        }

        Vue.component('site-widgets', {
            mixins: [widgetsMixin],
            data: () => ({
                dialogVisible: false,
                dialogTitle: '',
                widgetEditUrl: null,
            }),
            mounted() {
                this.updateEditWidget();
            },
            methods: {         
                /**
                 * When an edit-widget component clicks on save.
                 */
                updateEditWidget() {
                    var self = this;
                    window.document.addEventListener('widgetUpdated', e => {
                        console.log('widget updated...', e.detail);

                        // update the widget title
                        let area = self.widgetAreas.find(a => a.id === e.detail.areaId);
                        let widgetIns = area.widgetInstances.find(w => w.id === e.detail.widgetId);
                        widgetIns.title = e.detail.title;

                        // show toast and close dialog
                        self.$root.toast('Widget updated.');
                        self.closeDialog();
                    });
                    window.document.addEventListener('widgetUpdatedFailed', e => {
                        console.log('widget update failed...', e.detail);
                        self.$root.toastError('Widget update failed.');
                    });
                    window.document.addEventListener('updateIframeHeight', e => {
                        console.log('update parent iframe height...', e.detail);
                        self.updateIframeHeight(e.detail);
                    });
                },
                /**
                 * When user drags a widget from info's section or an area to an area.
                 * @@param evt
                 */
                add(evt) {
                    console.log("adding... ");

                    let fromInfos = evt.from.id === 'widget-infos';
                    let dto = {
                        areaToId: evt.to.id,
                        index: evt.newIndex,
                        folder: null,
                        widgetId: 0,
                        areaFromId: null,
                        name: null,
                        title: null,
                    };

                    if (fromInfos) {
                        dto.folder = this.widgetInfos[evt.oldIndex].folder;
                    }
                    else {
                        let area = this.widgetAreas.find(a => a.id === evt.from.id);
                        let widgetIns = area.widgetInstances[evt.oldIndex];

                        dto.folder = widgetIns.folder;
                        dto.widgetId = widgetIns.id;
                        dto.areaFromId = evt.from.id;
                        dto.name = widgetIns.name;
                        dto.title = widgetIns.title;
                    }

                    axios.post('/admin/widgets?handler=add', dto, this.$root.headers)
                        .then(resp => {
                            let areaTo = this.widgetAreas.find(a => a.id === evt.to.id);
                            if (fromInfos) {
                                areaTo.widgetInstances.splice(evt.newIndex, 0, resp.data);
                            }
                            else {
                                // remove from widget from old area
                                let areaFrom = this.widgetAreas.find(a => a.id === evt.from.id);
                                areaFrom.widgetInstances.splice(evt.oldIndex, 1);
                                // add to new area
                                areaTo.widgetInstances.splice(evt.newIndex, 0, resp.data);
                            }
                        })
                        .catch(err => {
                            console.log(err);
                            this.$root.toastError('Add widget failed.');
                        });
                },
                /**
                 * When user drags a widget instance to reorder it within an area.
                 * @@param evt
                 */
                sort(evt) {
                    if (evt.from.id !== evt.to.id) return;
                    console.log("ordering... ");

                    let area = this.widgetAreas.find(a => a.id === evt.from.id);
                    let widgetInst = area.widgetInstances[evt.oldIndex];
                    let dto = {
                        index: evt.newIndex,
                        widgetId: widgetInst.id,
                        areaId: evt.from.id,
                    };

                    axios.post('/admin/widgets?handler=reorder', dto, this.$root.headers)
                        .then(() => {
                            // remove from old index and add to new index
                            area.widgetInstances.splice(evt.oldIndex, 1);
                            area.widgetInstances.splice(evt.newIndex, 0, widgetInst);
                        })
                        .catch(err => {
                            console.log(err);
                            this.$root.toastError('Order widget failed.');
                        });
                },
                /**
                 * When user clicks on edit icon on an widget instance.
                 * @@param widget
                 */
                editWidget(widget) {
                    console.log("editing widget: ", widget);
                    this.dialogTitle = widget.name;
                    this.dialogVisible = true;

                    axios.get('/admin/widgets?handler=edit', { params: { widgetId: widget.id } })
                        .then(resp => {
                            this.widgetEditUrl = resp.data;
                            console.log('widget edit url: ', this.widgetEditUrl);
                        })
                        .catch(err => {
                            console.log(err);
                            this.$root.toastError('Edit widget failed.');
                        });
                },
                /**
                 * When user clicks on delete icon on an widget instance.
                 * @@param widget
                 * @@param areaId
                 */
                deleteWidget(widget, areaId) {
                    console.log("deleting widget: ", widget);
                    if (confirm(`Are you sure to delete the widget?`)) {
                        axios.delete(`/admin/widgets?widgetId=${widget.id}&areaId=${areaId}`, this.$root.headers)
                            .then(() => {
                                let area = this.widgetAreas.find(a => a.id === areaId);
                                let widx = area.widgetInstances.indexOf(widget);
                                area.widgetInstances.splice(widx, 1);
                            })
                            .catch(err => {
                                console.log(err);
                                this.$root.toastError('Delete widget failed.');
                            });
                    }
                },
                /**
                * A hack to make iframe height same as its content.
                * https://stackoverflow.com/a/9976309/32240
                */
                resizeIframe() {
                    let f = this.$refs.editIframe;
                    f.style.height = f.contentWindow.document.body.scrollHeight + 'px';
                },
                updateIframeHeight(h) {
                    let f = this.$refs.editIframe;
                    f.style.height = h + 'px';
                },
                closeDialog() {
                    this.dialogVisible = false;
                },
            }
        });
    </script>
}
