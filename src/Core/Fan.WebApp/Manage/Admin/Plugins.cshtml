@page
@model PluginsModel
@{
    ViewData["Title"] = "Plugins";
}

<plugins inline-template ref="exts">
    <v-container>
        <v-data-table :headers="headers"
                      :items="pluginInfos"
                      item-key="folder"
                      :total-items="totalPlugins"
                      :rows-per-page-items="rowsPerPageItems"
                      rows-per-page-text=""
                      class="elevation-1">
            <template slot="items" slot-scope="props">
                <td>
                    <h3>{{ props.item.name }}</h3>
                </td>
                <td>
                    <div>{{ props.item.description }}</div>
                    <div>
                        <span>Version {{ props.item.version }}</span> |
                        <span>By <a :href="props.item.authorUrl" target="_blank">{{ props.item.author }}</a></span> |
                        <span><a :href="props.item.pluginUrl" target="_blank">View details</a></span>
                    </div>
                </td>
                <td>
                    <div v-if="props.item.active">
                        <v-btn fab small color="success" @@click="deactivate(props.item)"><v-icon>power</v-icon></v-btn>
                        <v-btn fab small color="primary" v-if="props.item.settingsUrl !== null" @@click="viewSettings(props.item)"><v-icon>build</v-icon></v-btn>
                    </div>
                    <div v-else>
                        <v-btn fab small dark @@click="activate(props.item)"><v-icon>power_off</v-icon></v-btn>
                    </div>
                </td>
            </template>
            <template slot="no-data">
                <div>You have no plugins.</div>
            </template>
        </v-data-table>
        <v-dialog lazy
                  v-model="dialogVisible"
                  @@keydown.esc="closeDialog"
                  content-class="widget-edit-dialog">
            <v-card>
                <v-card-title class="pl-4 pt-2 pb-0">
                    <span style="font-size:larger;font-weight:bold">{{ dialogTitle }}</span>
                    <v-spacer></v-spacer>
                    <v-btn flat small fab @@click="closeDialog">
                        <v-icon>close</v-icon>
                    </v-btn>
                </v-card-title>
                <v-divider></v-divider>
                <v-card-text>
                    <iframe ref="settingsIframe"
                            @@load="$root.initIframeHeight($refs.settingsIframe)"
                            frameborder="0"
                            scrolling="no"
                            class="widget-edit-frame"
                            v-if="settingsUrl"
                            :src="settingsUrl"
                            :title="dialogTitle"></iframe>
                </v-card-text>
            </v-card>
        </v-dialog>
    </v-container>
</plugins>

@section ComponentScripts {
    <script>
        let pluginsMixin = {
            data: function () {
                return {
                    pluginInfos: @Html.Raw(Model.PluginManifestsJson),
                    totalPlugins: 1,
                    rowsPerPageItems: @PluginsModel.DEFAULT_ROW_PER_PAGE_ITEMS,
                }
            },
        }

        Vue.component('plugins', {
            mixins: [pluginsMixin],
            data: () => ({
                headers: [
                  { text: 'Plugin', value: 'plugin' },
                  { text: 'Description', value: 'description', sortable: false },
                  { text: 'Actions', value: 'actions', sortable: false }
                ],
                dialogVisible: false,
                dialogTitle: '',
                settingsUrl: null,
            }),
            mounted() {
                this.initSettingsUpdatedHandler();
            },
            methods: {
                activate(plugin) {
                    console.log('activate: ', plugin);
                    axios.post('/admin/plugins?handler=activate', { folder: plugin.folder }, this.$root.headers)
                        .then(resp => {
                            console.log('activated: ', resp.data);
                            plugin.active = true;
                            plugin.id = resp.data;
                        })
                        .catch(err => {
                            console.log(err);
                            this.$root.toastError('Activate plugin failed.');
                        });
                },
                deactivate(plugin) {
                    console.log('deactivate: ', plugin);
                    axios.post('/admin/plugins?handler=deactivate', { id: plugin.id }, this.$root.headers)
                        .then(resp => {
                            console.log('deactivated: ', resp.data);
                            plugin.active = false;
                        })
                        .catch(err => {
                            console.log(err);
                            this.$root.toastError('Deactivate plugin failed.');
                        });
                },
                viewSettings(plugin) {
                    this.dialogTitle = plugin.name;
                    this.dialogVisible = true;
                    this.settingsUrl = plugin.settingsUrl;
                },
                closeDialog() {
                    this.dialogVisible = false;
                },
                initSettingsUpdatedHandler() {
                    var self = this;
                    window.document.addEventListener('ExtSettingsUpdated', e => {
                        self.$root.toast(e.detail.msg);
                        self.closeDialog();
                    });
                },
            }
        });
    </script>
}